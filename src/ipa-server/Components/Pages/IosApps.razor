@page "/ios-apps/{identifier}"
@using Claunia.PropertyList
@using System.IO.Compression
@using System.Text.RegularExpressions
@using System.Security.Cryptography
@using System.Diagnostics
@using System;
@using System.Collections.Concurrent;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using IpaHosting.Controllers
@using Microsoft.AspNetCore.Mvc.Routing
@using QRCoder
@attribute [StreamRendering]

@inject IStorageService _storage;

<PageTitle>IPAs</PageTitle>

<h1>IPAs</h1>

@if (_packages == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var package in _packages)
    {
        <div>
            <img src="@package.DisplayImageUrl" style="height: 40px; width: 40px; " />
            @package.CreationTime.ToString("dd. MMM") | @package.CreationTime.ToString("HH:mm") <br />
            @package.CFBundleIdentifier <br />
            <a href="@package.ItmsServiceUri" style="font-size: 1.5rem;">
                <div style="background-color: lightgray; border-radius: 1em; display: inline-block; padding: 0.2em 1em;">
                    install
                </div>
            </a>
            @package.CFBundleShortVersionString (@package.CFBundleVersion)
        </div>
        <div>
            <details>
                <summary>Details</summary>
                <ul>
                    <li>SHA256: @package.Sha256</li>
                    <li><a href="@package.PlistUrl">manifest.plist</a></li>
                    <li><a href="@package.IpaDownloadUrl">app.ipa</a></li>
                </ul>
                <img src="@ToDataUrl("image/png", package.ItmsServiceUri.ToString())" width="200" height="200" style="display: block;" />

                <details>
                    <summary>Info.plist as YAML</summary>
                    <pre>
                        <code>
                            @package.InfoPlistYml
                        </code>
                    </pre>
                </details>

                <details>
                    <summary>Info.plist</summary>
                    <pre>
                        <code>
                            @package.InfoPlistXml
                        </code>
                    </pre>
                </details>

                <details>
                    <summary>Info.plist as JSON</summary>
                    <pre>
                        <code>
                            @package.InfoPlistJson
                        </code>
                    </pre>
                </details>
            </details>
        </div>
        <hr />
    }
}

@code {
    [Parameter]
    public required string Identifier { get; init; }

    private IpaVm[]? _packages;

    [Inject] IStorageService _storageService { get; init; }

    protected override async Task OnInitializedAsync()
    {
        var result = new ConcurrentBag<IpaVm>();

        var foundPackages = _storage.GetPackages(PackageKind.Ipa, Identifier).ToArray();
        await Parallel.ForEachAsync(foundPackages, async (pkg, ct) =>
        {
            try
            {
                var info = _storageService.GetFile(PackageKind.Ipa, pkg.Sha256);

                var package = new IpaVm
                    {
                        CreationTime = pkg.UploadDateUtc.ToLocalTime(),
                        StorageKey = pkg.Sha256.Value,
                        InfoPlistXml = info.MetaData.InfoPlistXml,
                        InfoPlistJson = info.MetaData.InfoPlistJson,
                        InfoPlistYml = ConvertJsonToYml(info.MetaData.InfoPlistJson),
                        CFBundleIdentifier = info.MetaData.CFBundleIdentifier,
                        CFBundleShortVersionString = info.MetaData.CFBundleShortVersionString,
                        CFBundleVersion = info.MetaData.CFBundleVersion,
                        DisplayImageUrl = MyUrlHelper.AppIconUrl(pkg.Sha256),
                        IpaDownloadUrl = "/TODO",
                        PlistUrl = "/TODO",
                        Sha256 = pkg.Sha256.Value,
                        ItmsServiceUri = new Uri("itms-services://?action=download-manifest&url=" + Uri.EscapeDataString("TODO"))
                    };

                result.Add(package);
            }
            catch (Exception ex)
            {
                Program.Logger.LogError(ex, $"failed to process file '{pkg.Sha256}'");
            }
        });

        _packages = result.ToArray();
    }

    private static string ConvertJsonToYml(string json)
    {
        var serializer = new SharpYaml.Serialization.Serializer();
        var yml = serializer.Serialize(serializer.Deserialize(json));
        return yml;
    }

    private static string ToDataUrl(string mimeType, string text)
    {
        byte[] qrCodeImage;
        using (QRCodeGenerator qrGenerator = new QRCodeGenerator())
        using (QRCodeData qrCodeData = qrGenerator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q))
        using (PngByteQRCode qrCode = new PngByteQRCode(qrCodeData))
        {
            qrCodeImage = qrCode.GetGraphic(20);
        }

        var base64 = Convert.ToBase64String(qrCodeImage);
        return string.Format("data:{0};base64,{1}", mimeType, base64);
    }

    private class IphoneInstallPackage
    {
        public required DateTime CreationTime { get; init; }
        public required string StorageKey { get; init; }
        public required Uri ItmsServiceUri { get; init; }
        public required IphoneInstallPackageInfo Info { get; init; }
    }

    class IpaVm
    {
        public required DateTime CreationTime { get; init; }
        public required string StorageKey { get; init; }
        public required string InfoPlistXml { get; init; }
        public required string InfoPlistJson { get; init; }
        public required string InfoPlistYml { get; init; }
        public required Uri DisplayImageUrl { get; init; }
        public required Uri ItmsServiceUri { get; init; }
        public required string CFBundleIdentifier { get; init; }
        public required string CFBundleShortVersionString { get; init; }
        public required string CFBundleVersion { get; init; }
        public required string Sha256 { get; init; }
        public required string PlistUrl { get; init; }
        public required string IpaDownloadUrl { get; init; }
    }
}
