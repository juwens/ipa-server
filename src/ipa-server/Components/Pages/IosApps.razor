@page "/ios-apps/{identifier}"
@using Claunia.PropertyList
@using System.IO.Compression
@using System.Text.RegularExpressions
@using System.Security.Cryptography
@using System.Diagnostics
@using System;
@using System.Collections.Concurrent;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using IpaHosting.Controllers
@using Microsoft.AspNetCore.Mvc.Routing
@using QRCoder
@attribute [StreamRendering]

@inject IStorageService _storage;

<PageTitle>IPAs</PageTitle>

<h1>IPAs</h1>

@if (_packages == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var package in _packages)
    {
        <div>
            <img src="@package.Info.DisplayImageUrl" style="height: 40px; width: 40px; " />
            @package.CreationTime.ToString("dd. MMM") | @package.CreationTime.ToString("HH:mm") <br />
            @package.Info.CFBundleIdentifier <br />
            <br />
            @* <br />
    <a href="itms-services://?action=download-manifest&url=@package.Info.PlistUrl">install</a> <br />
    <br />
    <br /> *@
            <a href="@package.ItmsServiceUri">install encoded</a> <br />
            <br />
            @package.Info.CFBundleShortVersionString (@package.Info.CFBundleVersion)
        </div>
        <div>
            <details>
                <summary>Details</summary>
                <ul>
                    <li>SHA256: @package.Info.Sha256</li>
                    <li><a href="@package.Info.PlistUrl">manifest.plist</a></li>
                    <li><a href="@package.Info.IpaDownloadUrl">app.ipa</a></li>
                </ul>
                <img src="@ToDataUrl("image/png", package.ItmsServiceUri.ToString())" width="200" height="200" style="display: block;" />

                <details>
                    <summary>Info.plist</summary>
                    <pre>
                        @package.Info.InfoPlistXml
                                    </pre>
                </details>
            </details>
        </div>
        <hr />
    }
}

@code {
    [Parameter]
    public required string Identifier { get; init; }

    private IphoneInstallPackage[]? _packages;

    protected override async Task OnInitializedAsync()
    {
        var packages = new ConcurrentBag<IphoneInstallPackage>();

        var blobs = _storage.GetPackages(PackageKind.Ipa, Identifier).ToArray();
        await Parallel.ForEachAsync(blobs, async (blob, ct) =>
        {
            try
            {
                var info = await IpaHelper.GetInfoAsync(blob);

                var package = new IphoneInstallPackage
                    {
                        CreationTime = blob.CreatedUtc.Value,
                        StorageKey = blob.Key,
                        Info = info,
                        ItmsServiceUri = new Uri("itms-services://?action=download-manifest&url=" + Uri.EscapeDataString(info.PlistUrl))
                    };

                packages.Add(package);
            }
            catch (Exception ex)
            {
                Program.Logger.LogError(ex, $"failed to process file '{blob.Key}'");
            }
        });

        _packages = packages.ToArray();
    }

    private static string ToDataUrl(string mimeType, string text)
    {
        byte[] qrCodeImage;
        using (QRCodeGenerator qrGenerator = new QRCodeGenerator())
        using (QRCodeData qrCodeData = qrGenerator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q))
        using (PngByteQRCode qrCode = new PngByteQRCode(qrCodeData))
        {
            qrCodeImage = qrCode.GetGraphic(20);
        }

        var base64 = Convert.ToBase64String(qrCodeImage);
        return string.Format("data:{0};base64,{1}", mimeType, base64);
    }

    private class IphoneInstallPackage
    {
        public required DateTime CreationTime { get; init; }
        public required string StorageKey { get; init; }
        public required Uri ItmsServiceUri { get; init; }
        public required IpaHelper.IphoneInstallPackageInfos Info { get; init; }
    }
}
